#!/bin/sh

# Gandi Automatic DNS 0.1

# Copyright (c) 2012, 2013 Brian P. Curran <brianpcurran@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

usage() {
  echo "
Usage: $0 [-f] [-t] [-v] [-i EXT_IF] -a APIKEY -d EXAMPLE.COM -r \"RECORD-NAMES\"

EXT_IF: The name of your external network interface
APIKEY: Your API key provided by Gandi
EXAMPLE.COM: The domain name whose active zonefile will be updated
RECORD-NAMES: A space-separated list of the names of the A records to update or create

-f: Force an update regardless of IP address discrepancy
-t: Only create the new version file; don't activate it
-v: Print information to stdout even if a new zonefile isn't needed
-i: Use ifconfig instead of OpenDNS to determine external IP address
"
  exit 1
}

while [ $# -gt 0 ]; do
  case "$1" in
    -f) force="yes";;
    -t) testing="yes";;
    -v) verbose="yes";;
    -i) ext_if="$2"; shift;;
    -a) apikey="$2"; shift;;
    -d) domain="$2"; shift;;
    -r) records="$2"; shift;;
    *) usage; break
  esac
  shift
done
if [ -z "$apikey" -o -z "$domain" -o -z "$records" ]; then
  usage
fi

gandi="rpc.gandi.net:443"
case "$records" in
  *@*) dns="$domain";;
  *) subdomain=`echo $records | awk '{print $1}'`; dns="$subdomain.$domain"
esac
ns_ip=`dig +short @a.dns.gandi.net "$dns"`
if [ ! -z "$ext_if" ]; then
  ext_ip=`ifconfig "$ext_if" | sed -n 's/.*inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' | head -1`
else
  ext_ip=`dig +short @resolver1.opendns.com myip.opendns.com`
fi

rpc() {
  temp_xml=`mktemp`
  temp_post=`mktemp`
  echo "<?xml version=\"1.0\"?>
<methodCall>
  <methodName>"$1"</methodName>
  <params>
    <param>
      <value><string>"$apikey"</string></value>
    </param>" > $temp_xml
  shift
  while [ ! -z "$1" ]; do
    if [ "$1" != "struct" ]; then
      echo "    <param>
      <value><"$1">"$2"</"$1"></value>
    </param>" >> $temp_xml
    shift; shift
    else
      echo "    <param>
      <value>
        <struct>" >> $temp_xml
      shift;
      while [ ! -z "$1" ]; do
        if [ "$1" != "struct" ]; then
          echo "          <member>
            <name>"$1"</name>
            <value><"$2">"$3"</"$2"></value>
          </member>" >> $temp_xml
            shift; shift; shift;
        else
          break
        fi
      done
      echo "        </struct>
      </value>
    </param>" >> $temp_xml
    fi
  done
  echo "  </params>
</methodCall>" >> $temp_xml
  echo "POST /xmlrpc/ HTTP/1.0
User-Agent: Gandi Automatic DNS shell script/0.1
Host: "$gandi"
Content-Type: text/xml
Content-Length: `cat "$temp_xml" | wc -c`
" > "$temp_post"
  cat "$temp_xml" >> "$temp_post"
  cat "$temp_post" | openssl s_client -quiet -connect "$gandi"
  rm "$temp_xml"
  rm "$temp_post"
}

update() {
  while [ ! -z "$1" ]; do
    rpc "domain.zone.record.delete" "int" "$zone_id" "int" "$new_version_id" "struct" "name" "string" "$1" "type" "string" "A" > /dev/null 2>&1
    rpc "domain.zone.record.add" "int" "$zone_id" "int" "$new_version_id" "struct" "name" "string" "$1" "type" "string" "A" "value" "string" "$ext_ip" > /dev/null 2>&1
    shift
  done    
}

if [ "$ext_ip" != "$ns_ip" -o "$force" = "yes" ]; then
  zone_id=`rpc "domain.info" "string" "$domain" | grep -A 1 zone_id | sed -n 's/.*<int>\([0-9]*\).*/\1/p'` > /dev/null 2>&1
  new_version_id=`rpc "domain.zone.version.new" "int" "$zone_id" | sed -n 's/.*<int>\([0-9]*\).*/\1/p'` > /dev/null 2>&1
  update $records
  if [ "$testing" != "yes" ]; then
    echo "Activating version "$new_version_id" of the zonefile for domain "$domain"...\n"
    rpc "domain.zone.version.set" "int" "$zone_id" "int" "$new_version_id"
    echo "\nTried to update the following A records to "$ext_ip": "$records". There is no error checking on the RPCs so check the web interface if you want to be sure the update was successful, or look at the methodResponse from domain.zone.version.set()."
  else
    echo "Created a new version of the current zonefile but did not activate it. Check the web interface."
  fi
  exit
else
  # The specified A records appear to be up to date--or at least the first one is--so don't do anything
  if [ "$verbose" = "yes" ]; then
    if [ ! -z "$ext_if" ]; then
      ext_ip_method="ifconfig "$ext_if""
    else
      ext_ip_method="OpenDNS"
    fi
    echo "External IP address: "$ext_ip" detected with "$ext_ip_method"
Nameserver IP address: "$ns_ip"

No update needed. Exiting."
  fi
  exit
fi

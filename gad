#!/bin/sh

# Gandi Automatic DNS 0.2

# Copyright (c) 2012, 2013 ***REMOVED***
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

usage() {
  echo "
Usage: $0 [-6] [-f] [-t] [-v] [-c CA_PATH] [-i EXT_IF] -a APIKEY -d EXAMPLE.COM -r \"RECORD-NAMES\"

-6: Update AAAA record(s) instead of A record(s)
-f: Force the creation of a new zonefile regardless of IP address discrepancy
-t: If a new version of the zonefile is created, do not activate it
-v: Print information to stdout even if a new zonefile isn't needed
-c: Verify Gandi SSL certificate using certificates in this directory
-i: Use ifconfig instead of OpenDNS to determine external IP address

CA_PATH: Directory where CA certificates are stored
EXT_IF: The name of your external network interface
APIKEY: Your API key provided by Gandi
EXAMPLE.COM: The domain name whose active zonefile will be updated
RECORD-NAMES: A space-separated list of the name(s) of the A or AAAA record(s) to update or create
"
  exit 1
}

while [ $# -gt 0 ]; do
  case "$1" in
    -6) ipv6="yes";;
    -f) force="yes";;
    -t) testing="yes";;
    -v) verbose="yes";;
    -c) capath="$2"; shift;;
    -i) ext_if="$2"; shift;;
    -a) apikey="$2"; shift;;
    -d) domain="$2"; shift;;
    -r) records="$2"; shift;;
    *) usage; break
  esac
  shift
done
if [ -z "$apikey" -o -z "$domain" -o -z "$records" ]; then
  usage
fi
if [ "$ipv6" == "yes" ]; then
  record_type="AAAA"
  ip_regex="\([0-9A-Fa-f:]*\).*"
  inet="inet6"
else
  record_type="A"
  ip_regex="\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*"
  inet="inet"
fi

gandi="rpc.gandi.net:443"

rpc() {
  tmp_xml="<?xml version=\"1.0\"?>
<methodCall>
  <methodName>"$1"</methodName>
  <params>
    <param>
      <value><string>"$apikey"</string></value>
    </param>"
  shift
  while [ ! -z "$1" ]; do
    if [ "$1" != "struct" ]; then
      tmp_xml="$tmp_xml
    <param>
      <value><"$1">"$2"</"$1"></value>
    </param>"
    shift; shift
    else
      tmp_xml="$tmp_xml
    <param>
      <value>
        <struct>"
      shift;
      while [ ! -z "$1" ]; do
        if [ "$1" != "struct" ]; then
          tmp_xml="$tmp_xml
          <member>
            <name>"$1"</name>
            <value><"$2">"$3"</"$2"></value>
          </member>"
            shift; shift; shift;
        else
          break
        fi
      done
      tmp_xml="$tmp_xml
        </struct>
      </value>
    </param>"
    fi
  done
  tmp_xml="$tmp_xml
  </params>
</methodCall>"
  tmp_post="POST /xmlrpc/ HTTP/1.0
User-Agent: Gandi Automatic DNS shell script/0.2
Host: "$gandi"
Content-Type: text/xml
Content-Length:`echo "$tmp_xml" | wc -c`

"
  tmp_post="$tmp_post$tmp_xml"
  echo
  if [ ! -z "$capath" ]; then
    echo "$tmp_post" | openssl s_client -CApath "$capath" -quiet -connect "$gandi"
  else
    echo "$tmp_post" | openssl s_client -quiet -connect "$gandi"
  fi
  unset tmp_xml
  unset tmp_post
}

update() {
  while [ ! -z "$1" ]; do
    new_record_id=`rpc "domain.zone.record.list" "int" "$zone_id" "int" "$new_version_id" "struct" "name" "string" "$1" "type" "string" "$record_type" | grep -A 1 ">id<" | sed -n 's/.*<int>\([0-9]*\).*/\1/p'` > /dev/null 2>&1
    rpc "domain.zone.record.update" "int" "$zone_id" "int" "$new_version_id" "struct" "id" "int" "$new_record_id" "struct" "name" "string" "$1" "type" "string" "$record_type" "value" "string" "$ext_ip" > /dev/null 2>&1
    shift
  done    
}

create() {
  while [ ! -z "$1" ]; do
    rpc "domain.zone.record.add" "int" "$zone_id" "int" "$new_version_id" "struct" "name" "string" "$1" "type" "string" "$record_type" "value" "string" "$ext_ip" > /dev/null 2>&1
    shift
  done
}

check() {
  while [ ! -z "$1" ]; do
    record_value=`rpc "domain.zone.record.list" "int" "$zone_id" "int" "0" "struct" "name" "string" "$1" | grep -A 1 ">value<" | sed -n "s/.*<string>"$ip_regex"/\1/p"` > /dev/null 2>&1
    record_count=`echo "$record_value" | wc -w`
    if [ "$record_count" -gt "1" ]; then
      echo "Sorry, but gad does not support updating multiple records with the same name."
      exit 1
    elif [ -z "$record_value" ]; then
      if [ -z "$records_to_create" ]; then
        records_to_create="$1"
      else
        records_to_create="$records_to_create $1"
      fi
    elif [ "$ext_ip" != "$record_value" -o "$force" = "yes" ]; then
      if [ -z "$records_to_update" ]; then
        records_to_update="$1"
      else
        records_to_update="$records_to_update $1"
      fi
    fi
    shift
  done
}

# Get correct IP address
if [ ! -z "$ext_if" ]; then
  ext_ip_method="ifconfig "$ext_if""
  ext_ip=`ifconfig "$ext_if" | sed -n "s/.*"$inet" \(addr:\)* *"$ip_regex"/\2/p" | head -1`
else
  ext_ip_method="OpenDNS"
  ext_ip=`dig "$record_type" +short @resolver1.opendns.com myip.opendns.com`
fi
if [ -z "$ext_ip" ]; then
  echo "Failed to determine external IP address with "$ext_ip_method". See above error."
  exit 1
fi

# Get the active zonefile for the domain
zone_id=`rpc "domain.info" "string" "$domain" | grep -A 1 zone_id | sed -n 's/.*<int>\([0-9]*\).*/\1/p'` > /dev/null 2>&1

# Check values of records in the active version of the zonefile
check $records

# If there are any mismatches, create a new version of the zonefile, update the incorrect records, and activate it
if [ ! -z "$records_to_update" -o ! -z "$records_to_create" ]; then
  new_version_id=`rpc "domain.zone.version.new" "int" "$zone_id" | sed -n 's/.*<int>\([0-9]*\).*/\1/p'` > /dev/null 2>&1
  update $records_to_update
  create $records_to_create
  if [ "$testing" != "yes" ]; then
    echo "Activating version "$new_version_id" of the zonefile for domain "$domain"...\n\nopenssl s_client output and domain.zone.version.set() method response:"
    rpc "domain.zone.version.set" "int" "$zone_id" "int" "$new_version_id"
    echo "\nTried to update the following "$record_type" records to "$ext_ip": "$records_to_update" "$records_to_create"\n\nThere is no error checking on the RPCs so check the web interface if you want to be sure the update was successful, or look at the methodResponse from domain.zone.version.set() (a response of "1" means success)."
  else
    echo "Created version "$new_version_id" of the zonefile for domain "$domain".\n\nTried to update the following "$record_type" records to "$ext_ip": "$records_to_update" "$records_to_create"\n\nThere is no error checking on the RPCs so check the web interface if you want to be sure the update was successful."
  fi
  exit
else
  if [ "$verbose" = "yes" ]; then
    echo "External IP address "$ext_ip" detected with "$ext_ip_method" matches records: "$records". No update needed. Exiting."
  fi
  exit
fi
